{
  "openapi": "3.0.1",
  "info": {
    "title": "Library.Management.System.APIs",
    "description": "From shelf to you, our library's speedy too!",
    "contact": {
      "name": "Men3m",
      "email": "abdelmonemanwr7777@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "User Login",
        "requestBody": {
          "description": "Login credentials (email and password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/check-existing-email": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Check if an email is already registered.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email to check.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "User Registration",
        "requestBody": {
          "description": "Registration data including email, password, confirm password, and role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/Account/logout": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "User Logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/Books": {
      "post": {
        "tags": [
          "Books"
        ],
        "summary": "Adds a new book to the library.\r\nOnly accessible by Admin users.",
        "requestBody": {
          "description": "The book details to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Books"
        ],
        "summary": "Retrieves a list of books based on optional filters such as title, author, genre, pagination, and sorting.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Optional filter for the book title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Optional filter for the author's name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "Optional filter for the genre of the book.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for pagination (default is 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of books per page (default is 5).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional field to sort the books by (e.g., \"title\", \"author\").",
            "schema": {
              "type": "string",
              "default": "title"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Optional sorting order (asc for ascending, desc for descending; default is \"asc\").",
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Books/{id}": {
      "put": {
        "tags": [
          "Books"
        ],
        "summary": "Updates an existing book's details.\r\nOnly accessible by Admin users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the book to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new details of the book to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BookUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BookUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "summary": "Deletes a book from the library.\r\nOnly accessible by Admin users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the book to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Borrowing/{bookId}": {
      "post": {
        "tags": [
          "Borrowing"
        ],
        "summary": "Endpoint to borrow a book.",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "description": "ID of the book to borrow.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Borrowing": {
      "get": {
        "tags": [
          "Borrowing"
        ],
        "summary": "Endpoint to retrieve a list of books borrowed by the user who logged in.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Borrowing/return/{bookId}": {
      "post": {
        "tags": [
          "Borrowing"
        ],
        "summary": "Endpoint to return a borrowed book.",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "description": "ID of the book to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthResponseDTO": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BookDTO": {
        "required": [
          "author",
          "genre",
          "publishedYear",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "author": {
            "minLength": 1,
            "type": "string"
          },
          "genre": {
            "minLength": 1,
            "type": "string"
          },
          "publishedYear": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BookUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "type": "string",
            "nullable": true
          },
          "publishedYear": {
            "type": "integer",
            "format": "int32"
          },
          "isAvailable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Gender": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "LoginDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "rememberMe": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RegisterDTO": {
        "required": [
          "address",
          "confirmPassword",
          "email",
          "firstName",
          "gender",
          "lastName",
          "password",
          "phoneNumber",
          "role"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string"
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "minLength": 1,
            "type": "string"
          },
          "address": {
            "minLength": 1,
            "type": "string"
          },
          "phoneNumber": {
            "minLength": 1,
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "role": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}